			README
			======

	        GoogleEarth(c) Toolbox 
	    ------------------------------

Welcome to GoogleEarth Toolbox!  Google Earth provides an intuitive interactive virtual globe that is useful in spatio-temporal analysis.  Different types of progamming languages offer linkages to spatio-temporal data better in different contexts and API's, and this toolbox is an effort to raise accessability in spatio-temporal modeling.


Please see the project page at http://code.google.com/p/googleearthtoolbox/

Version 0.01 notes
-----------------

Setup initial git repository to include c,c++,java,python,ruby,octave and matlab.
Only octave and matlab folders currently have working code in them.  They are ports from the prior svn repository's version 98.  Not keeping svn going for this!



Contents
--------

    Included in this release are the following:

    README.txt 		this file
    LICENSE.txt		Software license
    NOTES.txt		Notes, issues and known bugs
    ruby/		Ruby version of toolbox
    python/		Python version of toolbox
    c/			C version of toolbox
    c++/		C++ version of toolbox
    java/		Java version of toolbox
    octave/		Octave version of toolbox
    matlab/		Matlab version of toolbox

    docs/JavaMail-1.1-changes.txt
			Description of the new APIs that were added in
			JavaMail API 1.1
    docs/JavaMail-1.2-changes.txt
			Description of the new APIs that were added in
			JavaMail API 1.2
    docs/JavaMail-1.3-changes.txt
			Description of the new APIs that were added in
			JavaMail API 1.3
    docs/JavaMail-1.4-changes.txt
			Description of the new APIs that were added in
			JavaMail API 1.4
    docs/JavaMail-1.2.ps	
			Postscript version of the JavaMail API 1.2 specification
    docs/JavaMail-1.2.pdf	
			PDF version of the JavaMail API 1.2 specification
    docs/Providers.ps
			Postscript version of the JavaMail Service Provider
			guide.
    docs/Providers.pdf
			PDF version of the JavaMail Service Provider guide.

    docs/javadocs/	The JavaMail API javadocs

    demo/README.txt	Instructions for running the demo programs
    demo/CRLFOutputStream.java
			demo OutputStream filter to convert all line terminators
			to CRLF
    demo/NewlineOutputStream.java
			demo OutputStream filter to convert all line terminators
			to platform's line terminator
    demo/copier.java	demo program to copy mail between folders
    demo/folderlist.java demo program to list subfolders
    demo/monitor.java	demo program to monitor for new mail
    demo/mover.java	demo program to move mail between folders
    demo/msgmultisendsample.java
			demo program to send a sample multipart message
    demo/msgsend.java	demo program to send a single part text message
			to a specified recipient (ala /bin/mail)
    demo/msgsendsample.java
			demo program to send a sample single part text message
    demo/msgshow.java	demo program to read messages from an IMAP store
    demo/namespace.java	demo program that illustrates use of namespace APIs
    demo/populate.java	demo program that copies entire folder hierarchies
    demo/registry.java	demo program that illustrates the registry
    demo/search.java	demo program to search folders
    demo/sendfile.java	demo program to send a file as an attachment
    demo/sendhtml.java  demo program to send html mail
    demo/smtpsend.java	demo program to illustrate handling SMTP error codes
    demo/transport.java	demo program to illustrate use of Transport
    demo/uidmsgshow.java
			demo program to read messages from an IMAP store
    demo/client/	source files for cool demo program that implements 
			a simple mail reader. (Uses Swing)
    demo/client/README.txt
			README file for running the simple mail-reader demo
    demo/servlet/	source for a simple servlet that allows using a
			web browser to read and send mail
    demo/servlet/README.txt
			README file that describes the JavaMailServlet
    demo/logging/	source files for demo program showing use of the
			com.sun.mail.util.logging.MailHandler class


Requirements
------------

Note that the JavaMail API requires the JavaBeans(TM) Activation
Framework package to be installed as well if you're using JDK 1.5
or earlier.  Download the latest version of the JavaBeans Activation
Framework from

	http://java.sun.com/beans/glasgow/jaf.html

and install it in a suitable location.


Installation
------------

  UNIX/Linux
  ----------

  1. Unzip the javamail1_4_3.zip archive.
     (You may have already done this.)

  2. Set your CLASSPATH to include the "mail.jar" file obtained from 
     the download, as well as the current directory. 

     Assuming you unzipped javamail1_4_3.zip in /u/me/download/ the
     following would work:

      export CLASSPATH=$CLASSPATH:/u/me/download/javamail-1.4.3/mail.jar:.

    Also, if you're using JDK 1.5 or earlier, include the
    "activation.jar" file that you obtained from downloading the
    JavaBeans Activation Framework, in your CLASSPATH.  For example:

      export CLASSPATH=$CLASSPATH:/u/me/download/activation/activation.jar

    
  3. Go to the demo directory

  4. Compile any demo using your Java compiler. For example:

      javac msgshow.java

  5. Run the demo. The '-' option lists the required and optional
     command-line options to successfully run any demo. For example:

      java msgshow -
    
    lists the available options. And

      java msgshow -T imap -H <mailserver> -U <username> -P <passwd> -f INBOX 5
    
    uses the IMAP protocol to display message number 5 from your INBOX.

  (Additional instructions on how to run the simple mail reader demo 
  and servlet demo are provided in demo/client/README.txt and
  demo/servlet/README.txt, respectively.)


  Windows
  -------

  1. Unzip the javamail1_4_3.zip archive.
     (You may have already done this.)

  2. Set your CLASSPATH to include the "mail.jar" file obtained from 
     the download, as well as the current directory. 

     Assuming you unzipped javamail1_4_3.zip in c:\download the
     following would work:
     
      set CLASSPATH=%CLASSPATH%;c:\download\javamail-1.4.3\mail.jar;.

    Also, if you're using JDK 1.5 or earlier, include the
    "activation.jar" file that you obtained from downloading the
    JavaBeans Activation Framework, in your CLASSPATH.

      set CLASSPATH=%CLASSPATH%;c:\download\activation\activation.jar
    
  3. Go to the demo directory

  4. Compile any demo using your Java compiler. For example:

      javac msgshow.java

  5. Run the demo. The '-' option lists the required and optional
     command-line options to successfully run any demo. For example:

      java msgshow -

    lists the available options. And

      java msgshow -T imap -H <mailserver> -U <username> -P <passwd> -f INBOX 5
    
    uses the IMAP protocol to display message number 5 from your INBOX.


  (Additional instructions on how to run the simple mail reader demo 
  and servlet demo are provided in demo/client/README.txt and
  demo/servlet/README.txt, respectively.)


Problems?
---------

Our web page at http://java.sun.com/products/javamail has a pointer
to the FAQ that includes information on protocols supported,
installation problems, etc.

See the NOTES.txt file for information on how to report bugs.

Enjoy!

The JavaMail API Team
